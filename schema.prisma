generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model CommentLikes {
  CommentLikeID String        @id @default(cuid()) @db.VarChar(45)
  CommentID     String?       @db.VarChar(45)
  UserID        String?       @db.VarChar(45)
  PostComments  PostComments? @relation(fields: [CommentID], references: [PostCommentID], onDelete: NoAction, onUpdate: NoAction, map: "CommentLikeID")
  Users         Users?        @relation(fields: [UserID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "UserLikedCommentID")

  @@index([CommentID], map: "CommentLikeID_idx")
  @@index([UserID], map: "UserLikedCommentID_idx")
}

model PostComments {
  PostCommentID      String         @id @default(cuid()) @db.VarChar(45)
  PostID             String         @db.VarChar(45)
  CommenterID        String         @db.VarChar(45)
  TextContent        String?        @db.VarChar(255)
  ImageContent       String?        @db.VarChar(45)
  ParentCommentID    String?        @db.VarChar(45)
  NumComments        Int            @default(0)
  TimeCommented      DateTime       @db.DateTime(0) @default(now())
  CommentLikes       CommentLikes[]
  Users              Users          @relation(fields: [CommenterID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "CommenterID")
  PostComments       PostComments?  @relation("PostCommentsToPostComments", fields: [ParentCommentID], references: [PostCommentID], onDelete: NoAction, onUpdate: NoAction, map: "ParentCommentID")
  other_PostComments PostComments[] @relation("PostCommentsToPostComments")
  Posts              Posts          @relation(fields: [PostID], references: [PostID], onDelete: NoAction, onUpdate: NoAction, map: "PostID")

  @@index([CommenterID], map: "CommenterID_idx")
  @@index([ParentCommentID], map: "ParentCommentID_idx")
  @@index([PostID], map: "PostID_idx")
}

model PostLikes {
  PostLikeID String @id @unique(map: "PostLikeID_UNIQUE") @default(cuid()) @db.VarChar(45)
  PostID     String @db.VarChar(45)
  UserID     String @db.VarChar(45)
  Posts      Posts  @relation(fields: [PostID], references: [PostID], onDelete: NoAction, onUpdate: NoAction, map: "PostLikedID")
  Users      Users  @relation(fields: [UserID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "UserLikePostID")

  @@index([PostID], map: "PostLikedID_idx")
  @@index([UserID], map: "UserLikePostID_idx")
}

model Posts {
  PostID       String         @id @default(cuid()) @db.VarChar(45)
  UserID       String         @db.VarChar(45)
  Title        String         @db.VarChar(45)
  TextContent  String?        @db.VarChar(45)
  ImageContent String?        @db.VarChar(45)
  NumLikes     Int            @default(0)
  TimePosted   DateTime?      @db.DateTime(0) @default(now())
  isPinned     Int            @default(0) @db.TinyInt
  isDeleted    Int            @default(0) @db.TinyInt
  PostComments PostComments[]
  PostLikes    PostLikes[]
  Users        Users          @relation(fields: [UserID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "PosterID")

  @@index([UserID], map: "PosterID_idx")
}

model UserCredentials {
  Username                              String    @id @unique(map: "Username_UNIQUE") @db.VarChar(45)
  Password                              String    @db.VarChar(60)
  PasswordSalt                          String?   @db.VarChar(45)
  isAdmin                               Boolean   @default(false)
  UserID                                String    @db.VarChar(45)
  DateRegistered                        DateTime? @db.DateTime(0) @default(now())
  DateModified                          DateTime? @db.DateTime(0) @default(now())
  Users_UserCredentials_UserIDToUsers   Users     @relation("UserCredentials_UserIDToUsers", fields: [UserID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "user_id")
  Users_UserCredentials_UsernameToUsers Users     @relation("UserCredentials_UsernameToUsers", fields: [Username], references: [Username], onDelete: NoAction, onUpdate: NoAction, map: "user_name")

  @@index([UserID], map: "user_id_idx")
}

model Users {
  UserID                                          String            @id @default(cuid()) @db.VarChar(45)
  Email                                           String            @unique(map: "Email_UNIQUE") @db.VarChar(45)
  FullName                                        String            @db.VarChar(45)
  ContactNumber                                   String            @db.VarChar(15)
  DateRegistered                                  DateTime          @db.DateTime(0) @default(now())
  DateModified                                    DateTime          @db.DateTime(0) @default(now())
  ProfileImg                                      String            @db.VarChar(45)
  Bio                                             String?           @db.VarChar(100)
  FavoriteQuote                                   String?           @db.VarChar(45)
  FavoriteCharImg                                 String?           @db.VarChar(45)
  Username                                        String            @unique(map: "Username_UNIQUE") @db.VarChar(45)
  CommentLikes                                    CommentLikes[]
  PostComments                                    PostComments[]
  PostLikes                                       PostLikes[]
  Posts                                           Posts[]
  UserCredentials_UserCredentials_UserIDToUsers   UserCredentials[] @relation("UserCredentials_UserIDToUsers")
  UserCredentials_UserCredentials_UsernameToUsers UserCredentials?  @relation("UserCredentials_UsernameToUsers")
}
