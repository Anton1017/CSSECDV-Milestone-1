generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model commentlikes {
  CommentLikeID String        @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  CommentID     String?       @db.VarChar(45)
  UserID        String?       @db.VarChar(45)
  postcomments  postcomments? @relation(fields: [CommentID], references: [PostCommentID], onDelete: NoAction, onUpdate: NoAction, map: "CommentLikeID")
  users         users?        @relation(fields: [UserID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "UserLikedCommentID")

  @@index([CommentID], map: "CommentLikeID_idx")
  @@index([UserID], map: "UserLikedCommentID_idx")
}

model postcomments {
  PostCommentID      String         @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  PostID             String         @db.VarChar(45)
  CommenterID        String         @db.VarChar(45)
  TextContent        String?        @db.VarChar(255)
  ImageContent       String?        @db.VarChar(48)
  ParentCommentID    String?        @db.VarChar(45)
  NumComments        Int            @default(0)
  TimeCommented      DateTime       @default(dbgenerated("(now())")) @db.DateTime(0)
  commentlikes       commentlikes[]
  users              users          @relation(fields: [CommenterID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "CommenterID")
  postcomments       postcomments?  @relation("postcommentsTopostcomments", fields: [ParentCommentID], references: [PostCommentID], onDelete: NoAction, onUpdate: NoAction, map: "ParentCommentID")
  other_postcomments postcomments[] @relation("postcommentsTopostcomments")
  posts              posts          @relation(fields: [PostID], references: [PostID], onDelete: NoAction, onUpdate: NoAction, map: "PostID")

  @@index([CommenterID], map: "CommenterID_idx")
  @@index([ParentCommentID], map: "ParentCommentID_idx")
  @@index([PostID], map: "PostID_idx")
}

model postlikes {
  PostLikeID String @id @unique(map: "PostLikeID_UNIQUE") @default(dbgenerated("(uuid())")) @db.VarChar(45)
  PostID     String @db.VarChar(45)
  UserID     String @db.VarChar(45)
  posts      posts  @relation(fields: [PostID], references: [PostID], onDelete: NoAction, onUpdate: NoAction, map: "PostLikedID")
  users      users  @relation(fields: [UserID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "UserLikePostID")

  @@index([PostID], map: "PostLikedID_idx")
  @@index([UserID], map: "UserLikePostID_idx")
}

model posts {
  PostID       String         @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  UserID       String         @db.VarChar(45)
  Title        String         @db.VarChar(45)
  TextContent  String?        @db.VarChar(45)
  ImageContent String?        @db.VarChar(48)
  NumLikes     Int            @default(0)
  TimePosted   DateTime?      @default(dbgenerated("(now())")) @db.DateTime(0)
  isPinned     Int            @default(0) @db.TinyInt
  isDeleted    Int            @default(0) @db.TinyInt
  postcomments postcomments[]
  postlikes    postlikes[]
  users        users          @relation(fields: [UserID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "PosterID")

  @@index([UserID], map: "PosterID_idx")
}

model usercredentials {
  Username                              String    @id @unique(map: "Username_UNIQUE") @db.VarChar(45)
  Password                              String    @db.VarChar(60)
  PasswordSalt                          String?   @db.VarChar(45)
  isAdmin                               Boolean   @default(false)
  UserID                                String    @db.VarChar(45)
  users_usercredentials_UserIDTousers   users     @relation("usercredentials_UserIDTousers", fields: [UserID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "user_id")
  users_usercredentials_UsernameTousers users     @relation("usercredentials_UsernameTousers", fields: [Username], references: [Username], onDelete: NoAction, onUpdate: NoAction, map: "user_name")

  @@index([UserID], map: "user_id_idx")
}

model users {
  UserID                                          String            @id @default(dbgenerated("(uuid())")) @db.VarChar(45)
  Email                                           String            @unique(map: "Email_UNIQUE") @db.VarChar(45)
  FullName                                        String            @db.VarChar(45)
  ContactNumber                                   String            @db.VarChar(15)
  DateRegistered                                  DateTime          @default(dbgenerated("(now())")) @db.DateTime(0)
  DateModified                                    DateTime          @default(dbgenerated("(now())")) @db.DateTime(0)
  ProfileImg                                      String            @db.VarChar(48)
  Bio                                             String?           @db.VarChar(100)
  FavoriteQuote                                   String?           @db.VarChar(45)
  FavoriteCharImg                                 String?           @db.VarChar(48)
  Username                                        String            @unique(map: "Username_UNIQUE") @db.VarChar(45)
  commentlikes                                    commentlikes[]
  postcomments                                    postcomments[]
  postlikes                                       postlikes[]
  posts                                           posts[]
  usercredentials_usercredentials_UserIDTousers   usercredentials[] @relation("usercredentials_UserIDTousers")
  usercredentials_usercredentials_UsernameTousers usercredentials?  @relation("usercredentials_UsernameTousers")
}

model sessions {
  session_id String  @id @db.VarChar(128)
  expires    Int     @db.UnsignedInt
  data       String? @db.MediumText
}
